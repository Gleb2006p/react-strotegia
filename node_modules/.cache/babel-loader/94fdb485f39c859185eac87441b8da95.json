{"ast":null,"code":"import { politicsReducer } from \"./politics-reducer\";\nimport CountiesState from \"./counties-state\";\nimport regionsStore from \"./store-regions/regions-store\";\n\nfunction rerender() {}\n\nlet countryStore = {\n  _state: CountiesState.sikvoa,\n\n  dispatch(action) {\n    politicsReducer(this, action);\n    rerender();\n  },\n\n  updateFactory() {\n    this._state.factoriesValue = regionsStore.getValue(this._state.tag, \"factoryValue\");\n  },\n\n  updateIdeas() {\n    let index = 0;\n\n    for (let idea of this._state.ideas) {\n      if (!idea.conditionAwaible(countryStore)) {\n        this._state.ideas.splice(index, 1);\n      }\n\n      index++;\n    }\n  },\n\n  updateCurrentFlag() {\n    this._state.currentFlag = this._state.flags[this._state.rulingParty];\n  },\n\n  normalizeIdeologues() {\n    let summIdeology = 0;\n\n    for (let ideology in this._state.ideologues) {\n      let ideologyValue = this._state.ideologues[ideology];\n      summIdeology += ideologyValue;\n    }\n\n    for (let ideology in this._state.ideologues) {\n      this._state.ideologues[ideology] /= summIdeology;\n      this._state.ideologues[ideology] *= 100;\n    }\n  },\n\n  update() {\n    this._state.ideologuesDrift = {\n      communism: 0,\n      monarchy: 0,\n      imperialism: 0,\n      democracy: 0\n    };\n\n    for (let commander of this._state.commanders) {\n      commander.influence(this);\n    }\n\n    for (let idea of this._state.ideas) {\n      idea.influences(this);\n    }\n\n    for (let ideology in this._state.ideologuesDrift) {\n      this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\n\n      if (this._state.ideologues[ideology] < 0) {\n        this._state.ideologues[ideology] = 0.01;\n      }\n    }\n\n    this.updateFactory();\n    this.updateIdeas();\n    this.updateRulingParty();\n    this.updateCurrentFlag();\n    this.normalizeIdeologues();\n    console.log(this._state.factoriesValue);\n  },\n\n  updateRulingParty() {\n    for (let ideology in this._state.ideologues) {\n      let ideologyPopularity = this._state.ideologues[ideology];\n\n      if (ideologyPopularity > 50) {\n        this._state.rulingParty = ideology;\n      }\n    }\n  },\n\n  setDrift(ideology, driftValue, user) {\n    user.clearOptions();\n    this._state.ideologuesDrift[ideology] += driftValue;\n    user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\n  },\n\n  setUpdate(callback) {\n    rerender = callback;\n  },\n\n  generateIdeologuesData() {\n    let data = [];\n\n    for (let ideology in this._state.ideologues) {\n      let population = this._state.ideologues[ideology];\n      let dataObject = [ideology, population];\n      data.push(dataObject);\n    }\n\n    return data;\n  },\n\n  get rulingParty() {\n    return this._state.rulingParty;\n  },\n\n  get commanders() {\n    return this._state.commanders;\n  },\n\n  get ideas() {\n    return this._state.ideas;\n  },\n\n  get flag() {\n    return `images/flags/${this._state.currentFlag}`;\n  },\n\n  get ideologuesColor() {\n    return this._state.ideologuesColors;\n  }\n\n};\ncountryStore.update();\nexport default countryStore;","map":{"version":3,"sources":["C:/Users/Glib/Desktop/projects/minecraft-countries/src/store/country-store.js"],"names":["politicsReducer","CountiesState","regionsStore","rerender","countryStore","_state","sikvoa","dispatch","action","updateFactory","factoriesValue","getValue","tag","updateIdeas","index","idea","ideas","conditionAwaible","splice","updateCurrentFlag","currentFlag","flags","rulingParty","normalizeIdeologues","summIdeology","ideology","ideologues","ideologyValue","update","ideologuesDrift","communism","monarchy","imperialism","democracy","commander","commanders","influence","influences","updateRulingParty","console","log","ideologyPopularity","setDrift","driftValue","user","clearOptions","addOptions","setUpdate","callback","generateIdeologuesData","data","population","dataObject","push","flag","ideologuesColor","ideologuesColors"],"mappings":"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","sourcesContent":["import {politicsReducer} from \"./politics-reducer\";\r\nimport CountiesState from \"./counties-state\";\r\nimport regionsStore from \"./store-regions/regions-store\";\r\n\r\nfunction rerender(){\r\n\r\n}\r\n\r\nlet countryStore = {\r\n    _state : CountiesState.sikvoa,\r\n    dispatch(action){\r\n        politicsReducer(this, action);\r\n        rerender();\r\n    },\r\n    updateFactory(){\r\n       this._state.factoriesValue =  regionsStore.getValue(this._state.tag, \"factoryValue\");\r\n    },\r\n    updateIdeas(){\r\n        let index = 0;\r\n        for (let idea of this._state.ideas){\r\n            if (!idea.conditionAwaible(countryStore)){\r\n                this._state.ideas.splice(index, 1);\r\n            }\r\n            index ++\r\n        }\r\n    },\r\n    updateCurrentFlag(){\r\n        this._state.currentFlag = this._state.flags[this._state.rulingParty];\r\n    },\r\n    normalizeIdeologues(){\r\n        let summIdeology = 0;\r\n      for (let ideology in this._state.ideologues){\r\n          let ideologyValue = this._state.ideologues[ideology];\r\n          summIdeology += ideologyValue;\r\n      }\r\n      for (let ideology in this._state.ideologues){\r\n          this._state.ideologues[ideology] /= summIdeology;\r\n          this._state.ideologues[ideology] *= 100;\r\n      }\r\n    },\r\n    update(){\r\n        this._state.ideologuesDrift = {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        };\r\n        for (let commander of this._state.commanders){\r\n            commander.influence(this);\r\n        }\r\n        for (let idea of this._state.ideas){\r\n            idea.influences(this);\r\n        }\r\n        for (let ideology in this._state.ideologuesDrift){\r\n            this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\r\n            if (this._state.ideologues[ideology] < 0){\r\n                this._state.ideologues[ideology] = 0.01;\r\n            }\r\n        }\r\n        this.updateFactory();\r\n        this.updateIdeas();\r\n        this.updateRulingParty();\r\n        this.updateCurrentFlag();\r\n        this.normalizeIdeologues();\r\n        console.log(this._state.factoriesValue);\r\n    },\r\n    updateRulingParty(){\r\n        for (let ideology in this._state.ideologues){\r\n            let ideologyPopularity = this._state.ideologues[ideology];\r\n            if (ideologyPopularity > 50){\r\n                this._state.rulingParty = ideology;\r\n            }\r\n        }\r\n    },\r\n    setDrift(ideology, driftValue, user){\r\n        user.clearOptions();\r\n        this._state.ideologuesDrift[ideology] += driftValue;\r\n        user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\r\n\r\n    },\r\n    setUpdate(callback){\r\n        rerender = callback;\r\n    },\r\n    generateIdeologuesData(){\r\n        let data = [];\r\n\r\n        for (let ideology in this._state.ideologues){\r\n\r\n            let population = this._state.ideologues[ideology];\r\n            let dataObject = [ideology, population];\r\n            data.push(dataObject)\r\n        }\r\n        return data;\r\n    },\r\n    get rulingParty(){\r\n        return this._state.rulingParty;\r\n    },\r\n    get commanders(){\r\n        return this._state.commanders;\r\n    },\r\n    get ideas(){\r\n        return this._state.ideas;\r\n    },\r\n    get flag(){\r\n        return `images/flags/${this._state.currentFlag}`;\r\n    },\r\n    get ideologuesColor(){\r\n        return this._state.ideologuesColors;\r\n    },\r\n\r\n}\r\ncountryStore.update();\r\nexport default countryStore;"]},"metadata":{},"sourceType":"module"}