{"ast":null,"code":"import { politicsReducer } from \"./politics-reducer\";\n\nfunction rerender() {}\n\nlet commander = {\n  name: '',\n  image: '',\n  options: '',\n\n  influences(store) {},\n\n  addOptions(options) {\n    this.options += options + '\\n';\n  },\n\n  clearOptions() {\n    this.options = '';\n  }\n\n};\nlet ideas = {\n  name: '',\n  image: '',\n  options: '',\n\n  influences(store) {},\n\n  addOptions(options) {\n    this.options += options + '\\n';\n  },\n\n  clearOptions() {\n    this.options = '';\n  },\n\n  conditionAwaible(store) {}\n\n};\nlet region = {\n  d: '',\n  id: 0\n};\nconst IDEA_TAG = {\n  MON: 'monarchy',\n  DEM: 'democracy',\n  IMP: 'imperialism',\n  COM: 'communism'\n};\nlet store = {\n  _state: {\n    rulingParty: IDEA_TAG.MON,\n    flags: {\n      imperialism: 'imperialist_sikvoa.png',\n      democracy: 'democracy_sikvoa.png',\n      communism: 'communist_sikvoa.png',\n      monarchy: 'sikvoa.png'\n    },\n    currentFlag: 'sikvoa.png',\n    ideologues: {\n      communism: 0,\n      monarchy: 66,\n      imperialism: 33,\n      democracy: 0\n    },\n    factoriesValue: 100,\n    ideologuesColors: ['red', 'royalblue', 'purple', 'blue'],\n    ideologuesDrift: {\n      communism: 0,\n      monarchy: 0,\n      imperialism: 0,\n      democracy: 0\n    },\n    commanders: [{\n      __proto__: commander,\n      name: 'Глеб',\n      image: 'images/commanders/gleb.png',\n\n      influence(store) {\n        store.setDrift(IDEA_TAG.IMP, 1, this);\n      }\n\n    }, {\n      __proto__: commander,\n      name: 'Дима',\n      image: 'images/commanders/dima.png',\n\n      influence(store) {\n        store.setDrift(IDEA_TAG.MON, 0.5, this);\n      }\n\n    }],\n    regions: [{\n      __proto__: region,\n      id: 0,\n      d: 'm 133.87302,174.54052 c 0,0 26.37892,5.71544 26.37892,5.71544 0,0 -16.267,30.33576 -16.267,30.33576 0,0 -28.79699,-3.95684 -28.79699,-3.95684 0,0 5.71544,-24.84015 5.71544,-24.84015'\n    }, {\n      __proto__: region,\n      id: 1,\n      d: 'm 130.79548,164.86825 c 0,0 -14.50841,-4.61631 -14.50841,-4.61631 0,0 -9.23262,6.15508 -9.23262,6.15508 0,0 1.97842,10.7714 1.97842,10.7714 0,0 11.87052,4.61631 11.87052,4.61631 0,0 12.96963,-7.25421 12.96963,-7.25421 0,0 -3.07754,-9.67227 -3.07754,-9.67227 z'\n    }],\n    ideas: [{\n      __proto__: ideas,\n      name: 'Анти Коммунизм',\n      image: 'images/ideas/anti-communism.png',\n\n      influences(store) {\n        store.setDrift(IDEA_TAG.COM, -0.1, this);\n      },\n\n      conditionAwaible(store) {\n        return store.rulingParty !== IDEA_TAG.COM;\n      }\n\n    }, {\n      __proto__: ideas,\n      name: 'Легион Понасенкова',\n      image: 'images/ideas/legion_of_ponasenkov.png',\n\n      influences(store) {\n        store.setDrift(IDEA_TAG.DEM, 1.5, this);\n      },\n\n      conditionAwaible(store) {\n        return store.rulingParty !== IDEA_TAG.COM;\n      }\n\n    }]\n  },\n\n  dispatch(action) {\n    politicsReducer(this, action);\n    rerender();\n  },\n\n  updateIdeas() {\n    let index = 0;\n\n    for (let idea of this._state.ideas) {\n      if (!idea.conditionAwaible(store)) {\n        this._state.ideas.splice(index, 1);\n      }\n\n      index++;\n    }\n  },\n\n  updateCurrentFlag() {\n    this._state.currentFlag = this._state.flags[this._state.rulingParty];\n  },\n\n  normalizeIdeologues() {\n    let summIdeology = 0;\n\n    for (let ideology in this._state.ideologues) {\n      let ideologyValue = this._state.ideologues[ideology];\n      summIdeology += ideologyValue;\n    }\n\n    for (let ideology in this._state.ideologues) {\n      this._state.ideologues[ideology] /= summIdeology;\n      this._state.ideologues[ideology] *= 100;\n    }\n  },\n\n  update() {\n    this._state.ideologuesDrift = {\n      communism: 0,\n      monarchy: 0,\n      imperialism: 0,\n      democracy: 0\n    };\n\n    for (let commander of this._state.commanders) {\n      commander.influence(this);\n    }\n\n    for (let idea of this._state.ideas) {\n      idea.influences(this);\n    }\n\n    for (let ideology in this._state.ideologuesDrift) {\n      this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\n\n      if (this._state.ideologues[ideology] < 0) {\n        this._state.ideologues[ideology] = 0.01;\n      }\n    }\n\n    this.updateIdeas();\n    this.updateRulingParty();\n    this.updateCurrentFlag();\n    this.normalizeIdeologues();\n  },\n\n  updateRulingParty() {\n    for (let ideology in this._state.ideologues) {\n      let ideologyPopularity = this._state.ideologues[ideology];\n\n      if (ideologyPopularity > 50) {\n        this._state.rulingParty = ideology;\n      }\n    }\n  },\n\n  setDrift(ideology, driftValue, user) {\n    user.clearOptions();\n    this._state.ideologuesDrift[ideology] += driftValue;\n    user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\n  },\n\n  setUpdate(callback) {\n    rerender = callback;\n  },\n\n  generateIdeologuesData() {\n    let data = [];\n\n    for (let ideology in this._state.ideologues) {\n      let population = this._state.ideologues[ideology];\n      let dataObject = [ideology, population];\n      data.push(dataObject);\n    }\n\n    return data;\n  },\n\n  get rulingParty() {\n    return this._state.rulingParty;\n  },\n\n  get commanders() {\n    return this._state.commanders;\n  },\n\n  get ideas() {\n    return this._state.ideas;\n  },\n\n  get flag() {\n    return `images/flags/${this._state.currentFlag}`;\n  },\n\n  get ideologuesColor() {\n    return this._state.ideologuesColors;\n  },\n\n  get regions() {\n    return this._state.regions;\n  }\n\n};\nstore.update();\nexport default store;","map":{"version":3,"sources":["C:/Users/Glib/Desktop/projects/minecraft-countries/src/store/store.js"],"names":["politicsReducer","rerender","commander","name","image","options","influences","store","addOptions","clearOptions","ideas","conditionAwaible","region","d","id","IDEA_TAG","MON","DEM","IMP","COM","_state","rulingParty","flags","imperialism","democracy","communism","monarchy","currentFlag","ideologues","factoriesValue","ideologuesColors","ideologuesDrift","commanders","__proto__","influence","setDrift","regions","dispatch","action","updateIdeas","index","idea","splice","updateCurrentFlag","normalizeIdeologues","summIdeology","ideology","ideologyValue","update","updateRulingParty","ideologyPopularity","driftValue","user","setUpdate","callback","generateIdeologuesData","data","population","dataObject","push","flag","ideologuesColor"],"mappings":"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","sourcesContent":["import {politicsReducer} from \"./politics-reducer\";\r\nfunction rerender(){\r\n\r\n}\r\nlet commander = {\r\n    name: '',\r\n    image: '',\r\n    options : '',\r\n    influences(store) {\r\n\r\n    },\r\n    addOptions(options) {\r\n        this.options += options + '\\n';\r\n    },\r\n    clearOptions(){\r\n        this.options = '';\r\n    }\r\n}\r\nlet ideas = {\r\n    name: '',\r\n    image: '',\r\n    options : '',\r\n    influences(store) {\r\n\r\n    },\r\n    addOptions(options) {\r\n        this.options += options + '\\n';\r\n    },\r\n    clearOptions(){\r\n        this.options = '';\r\n    },\r\n    conditionAwaible(store){\r\n    }\r\n}\r\nlet region = {\r\n    d : '',\r\n    id : 0,\r\n}\r\nconst IDEA_TAG = {\r\n    MON : 'monarchy',\r\n    DEM : 'democracy',\r\n    IMP : 'imperialism',\r\n    COM : 'communism',\r\n}\r\nlet store = {\r\n    _state : {\r\n        rulingParty : IDEA_TAG.MON,\r\n        flags : {\r\n            imperialism : 'imperialist_sikvoa.png',\r\n            democracy : 'democracy_sikvoa.png',\r\n            communism : 'communist_sikvoa.png',\r\n            monarchy  : 'sikvoa.png',\r\n        },\r\n        currentFlag : 'sikvoa.png',\r\n        ideologues : {\r\n            communism : 0,\r\n            monarchy : 66,\r\n            imperialism : 33,\r\n            democracy : 0,\r\n        },\r\n        factoriesValue : 100,\r\n        ideologuesColors : [\r\n           'red',\r\n           'royalblue',\r\n           'purple',\r\n           'blue',\r\n        ],\r\n        ideologuesDrift : {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        },\r\n        commanders : [\r\n            {\r\n                __proto__ : commander,\r\n                name : 'Глеб',\r\n                image : 'images/commanders/gleb.png',\r\n\r\n                influence(store){\r\n                    store.setDrift(IDEA_TAG.IMP, 1, this)\r\n                },\r\n            },\r\n            {\r\n                __proto__: commander,\r\n                name : 'Дима',\r\n                image : 'images/commanders/dima.png',\r\n\r\n                influence(store) {\r\n                    store.setDrift(IDEA_TAG.MON, 0.5, this);\r\n                },\r\n\r\n\r\n            }\r\n        ],\r\n        regions : [\r\n            {\r\n                __proto__ : region,\r\n                id : 0,\r\n                d : 'm 133.87302,174.54052 c 0,0 26.37892,5.71544 26.37892,5.71544 0,0 -16.267,30.33576 -16.267,30.33576 0,0 -28.79699,-3.95684 -28.79699,-3.95684 0,0 5.71544,-24.84015 5.71544,-24.84015'\r\n            },\r\n            {\r\n                __proto__: region,\r\n                id : 1,\r\n                d  : 'm 130.79548,164.86825 c 0,0 -14.50841,-4.61631 -14.50841,-4.61631 0,0 -9.23262,6.15508 -9.23262,6.15508 0,0 1.97842,10.7714 1.97842,10.7714 0,0 11.87052,4.61631 11.87052,4.61631 0,0 12.96963,-7.25421 12.96963,-7.25421 0,0 -3.07754,-9.67227 -3.07754,-9.67227 z'\r\n            }\r\n        ],\r\n\r\n        ideas : [\r\n            {\r\n                __proto__ : ideas,\r\n                name : 'Анти Коммунизм',\r\n                image : 'images/ideas/anti-communism.png',\r\n                influences(store){\r\n                    store.setDrift(IDEA_TAG.COM, -0.1, this);\r\n                },\r\n                conditionAwaible(store){\r\n                    return store.rulingParty !== IDEA_TAG.COM;\r\n                }\r\n            },\r\n            {\r\n                __proto__ : ideas,\r\n                name : 'Легион Понасенкова',\r\n                image : 'images/ideas/legion_of_ponasenkov.png',\r\n                influences(store){\r\n                    store.setDrift(IDEA_TAG.DEM,   1.5, this);\r\n                },\r\n                conditionAwaible(store){\r\n                    return store.rulingParty !== IDEA_TAG.COM;\r\n                }\r\n            }\r\n\r\n\r\n        ],\r\n    },\r\n    dispatch(action){\r\n        politicsReducer(this, action);\r\n        rerender();\r\n    },\r\n    updateIdeas(){\r\n        let index = 0;\r\n        for (let idea of this._state.ideas){\r\n            if (!idea.conditionAwaible(store)){\r\n                this._state.ideas.splice(index, 1);\r\n            }\r\n            index ++\r\n        }\r\n    },\r\n    updateCurrentFlag(){\r\n        this._state.currentFlag = this._state.flags[this._state.rulingParty];\r\n    },\r\n    normalizeIdeologues(){\r\n        let summIdeology = 0;\r\n      for (let ideology in this._state.ideologues){\r\n          let ideologyValue = this._state.ideologues[ideology];\r\n          summIdeology += ideologyValue;\r\n      }\r\n      for (let ideology in this._state.ideologues){\r\n          this._state.ideologues[ideology] /= summIdeology;\r\n          this._state.ideologues[ideology] *= 100;\r\n      }\r\n    },\r\n    update(){\r\n        this._state.ideologuesDrift = {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        };\r\n        for (let commander of this._state.commanders){\r\n            commander.influence(this);\r\n        }\r\n        for (let idea of this._state.ideas){\r\n            idea.influences(this);\r\n        }\r\n        for (let ideology in this._state.ideologuesDrift){\r\n            this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\r\n            if (this._state.ideologues[ideology] < 0){\r\n                this._state.ideologues[ideology] = 0.01;\r\n            }\r\n        }\r\n        this.updateIdeas();\r\n        this.updateRulingParty();\r\n        this.updateCurrentFlag();\r\n        this.normalizeIdeologues();\r\n    },\r\n    updateRulingParty(){\r\n        for (let ideology in this._state.ideologues){\r\n            let ideologyPopularity = this._state.ideologues[ideology];\r\n            if (ideologyPopularity > 50){\r\n                this._state.rulingParty = ideology;\r\n            }\r\n        }\r\n    },\r\n    setDrift(ideology, driftValue, user){\r\n        user.clearOptions();\r\n        this._state.ideologuesDrift[ideology] += driftValue;\r\n        user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\r\n\r\n    },\r\n    setUpdate(callback){\r\n        rerender = callback;\r\n    },\r\n    generateIdeologuesData(){\r\n        let data = [];\r\n\r\n        for (let ideology in this._state.ideologues){\r\n\r\n            let population = this._state.ideologues[ideology];\r\n            let dataObject = [ideology, population];\r\n            data.push(dataObject)\r\n        }\r\n        return data;\r\n    },\r\n    get rulingParty(){\r\n        return this._state.rulingParty;\r\n    },\r\n    get commanders(){\r\n        return this._state.commanders;\r\n    },\r\n    get ideas(){\r\n        return this._state.ideas;\r\n    },\r\n    get flag(){\r\n        return `images/flags/${this._state.currentFlag}`;\r\n    },\r\n    get ideologuesColor(){\r\n        return this._state.ideologuesColors;\r\n    },\r\n    get regions(){\r\n        return this._state.regions;\r\n    }\r\n}\r\nstore.update();\r\nexport default store;"]},"metadata":{},"sourceType":"module"}