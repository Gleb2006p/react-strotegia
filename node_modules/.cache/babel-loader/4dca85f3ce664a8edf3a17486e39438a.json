{"ast":null,"code":"import { politicsReducer } from \"./politics-reducer\";\n\nfunction rerender() {}\n\nlet commander = {\n  name: '',\n  image: '',\n  options: '',\n\n  influences(store) {},\n\n  addOptions(options) {\n    this.options += options + '\\n';\n  },\n\n  clearOptions() {\n    this.options = '';\n  }\n\n};\nlet ideas = {\n  name: '',\n  image: '',\n  options: '',\n\n  influences(store) {},\n\n  addOptions(options) {\n    this.options += options + '\\n';\n  },\n\n  clearOptions() {\n    this.options = '';\n  }\n\n};\nconst IDEA_TAG = {\n  MON: 'monarchy',\n  DEM: 'democracy',\n  IMP: 'imperialism',\n  COM: 'communism'\n};\nlet store = {\n  _state: {\n    rulingParty: IDEA_TAG.MON,\n    flags: {\n      imperialism: 'imperialist_sikvoa.png',\n      democracy: 'democracy_sikvoa.png',\n      monarchy: 'sikvoa.png'\n    },\n    currentFlag: 'sikvoa.png',\n    ideologues: {\n      communism: 0,\n      monarchy: 66,\n      imperialism: 33,\n      democracy: 0\n    },\n    ideologuesDrift: {\n      communism: 0,\n      monarchy: 0,\n      imperialism: 0,\n      democracy: 0\n    },\n    commanders: [{\n      __proto__: commander,\n      name: 'Глеб',\n      image: 'images/commanders/gleb.png',\n\n      influence(store) {\n        store.setDrift(IDEA_TAG.IMP, 1, this);\n      }\n\n    }, {\n      __proto__: commander,\n      name: 'Дима',\n      image: 'images/commanders/dima.png',\n\n      influence(store) {\n        store.setDrift(IDEA_TAG.MON, 0.5, this);\n      }\n\n    }],\n    ideas: [{\n      __proto__: ideas,\n      image: 'anti-communism.png',\n\n      influences(store) {}\n\n    }]\n  },\n\n  dispatch(action) {\n    politicsReducer(this, action);\n    rerender();\n  },\n\n  updateCurrentFlag() {\n    this._state.currentFlag = this._state.flags[this._state.rulingParty];\n  },\n\n  normalizeIdeologues() {\n    let summIdeology = 0;\n\n    for (let ideology in this._state.ideologues) {\n      let ideologyValue = this._state.ideologues[ideology];\n      summIdeology += ideologyValue;\n    }\n\n    for (let ideology in this._state.ideologues) {\n      this._state.ideologues[ideology] /= summIdeology;\n      this._state.ideologues[ideology] *= 100;\n    }\n  },\n\n  update() {\n    this._state.ideologuesDrift = {\n      communism: 0,\n      monarchy: 0,\n      imperialism: 0,\n      democracy: 0\n    };\n\n    for (let commander of this._state.commanders) {\n      commander.influence(this);\n    }\n\n    for (let ideology in this._state.ideologuesDrift) {\n      this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\n    }\n\n    this.updateRulingParty();\n    this.updateCurrentFlag();\n    this.normalizeIdeologues();\n  },\n\n  updateRulingParty() {\n    for (let ideology in this._state.ideologues) {\n      let ideologyPopularity = this._state.ideologues[ideology];\n\n      if (ideologyPopularity > 50) {\n        this._state.rulingParty = ideology;\n      }\n    }\n  },\n\n  setDrift(ideology, driftValue, user) {\n    user.clearOptions();\n    this._state.ideologuesDrift[ideology] += driftValue;\n    user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\n  },\n\n  setUpdate(callback) {\n    rerender = callback;\n  },\n\n  generateIdeologuesData() {\n    let data = [];\n\n    for (let ideology in this._state.ideologues) {\n      let population = this._state.ideologues[ideology];\n      let dataObject = [ideology, population];\n      data.push(dataObject);\n    }\n\n    return data;\n  },\n\n  get commanders() {\n    return this._state.commanders;\n  },\n\n  get flag() {\n    return `images/flags/${this._state.currentFlag}`;\n  }\n\n};\nstore.update();\nwindow.store = store;\nexport default store;","map":{"version":3,"sources":["C:/Users/Glib/Desktop/projects/minecraft-countries/src/store/store.js"],"names":["politicsReducer","rerender","commander","name","image","options","influences","store","addOptions","clearOptions","ideas","IDEA_TAG","MON","DEM","IMP","COM","_state","rulingParty","flags","imperialism","democracy","monarchy","currentFlag","ideologues","communism","ideologuesDrift","commanders","__proto__","influence","setDrift","dispatch","action","updateCurrentFlag","normalizeIdeologues","summIdeology","ideology","ideologyValue","update","updateRulingParty","ideologyPopularity","driftValue","user","setUpdate","callback","generateIdeologuesData","data","population","dataObject","push","flag","window"],"mappings":"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","sourcesContent":["import {politicsReducer} from \"./politics-reducer\";\r\nfunction rerender(){\r\n\r\n}\r\nlet commander = {\r\n    name: '',\r\n    image: '',\r\n    options : '',\r\n    influences(store) {\r\n\r\n    },\r\n    addOptions(options) {\r\n        this.options += options + '\\n';\r\n    },\r\n    clearOptions(){\r\n        this.options = '';\r\n    }\r\n}\r\nlet ideas = {\r\n    name: '',\r\n    image: '',\r\n    options : '',\r\n    influences(store) {\r\n\r\n    },\r\n    addOptions(options) {\r\n        this.options += options + '\\n';\r\n    },\r\n    clearOptions(){\r\n        this.options = '';\r\n    }\r\n}\r\nconst IDEA_TAG = {\r\n    MON : 'monarchy',\r\n    DEM : 'democracy',\r\n    IMP : 'imperialism',\r\n    COM : 'communism',\r\n}\r\nlet store = {\r\n    _state : {\r\n        rulingParty : IDEA_TAG.MON,\r\n        flags : {\r\n            imperialism : 'imperialist_sikvoa.png',\r\n            democracy : 'democracy_sikvoa.png',\r\n            monarchy  : 'sikvoa.png',\r\n        },\r\n        currentFlag : 'sikvoa.png',\r\n        ideologues : {\r\n            communism : 0,\r\n            monarchy : 66,\r\n            imperialism : 33,\r\n            democracy : 0,\r\n        },\r\n        ideologuesDrift : {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        },\r\n        commanders : [\r\n            {\r\n                __proto__ : commander,\r\n                name : 'Глеб',\r\n                image : 'images/commanders/gleb.png',\r\n\r\n                influence(store){\r\n                    store.setDrift(IDEA_TAG.IMP, 1, this)\r\n                },\r\n            },\r\n            {\r\n                __proto__: commander,\r\n                name : 'Дима',\r\n                image : 'images/commanders/dima.png',\r\n\r\n                influence(store) {\r\n                    store.setDrift(IDEA_TAG.MON, 0.5, this);\r\n                },\r\n\r\n\r\n            }\r\n        ],\r\n        ideas : [\r\n            {\r\n                __proto__ : ideas,\r\n                image : 'anti-communism.png',\r\n                influences(store){\r\n\r\n                },\r\n            }\r\n        ],\r\n    },\r\n    dispatch(action){\r\n        politicsReducer(this, action);\r\n        rerender();\r\n    },\r\n    updateCurrentFlag(){\r\n        this._state.currentFlag = this._state.flags[this._state.rulingParty];\r\n    },\r\n    normalizeIdeologues(){\r\n        let summIdeology = 0;\r\n      for (let ideology in this._state.ideologues){\r\n          let ideologyValue = this._state.ideologues[ideology];\r\n          summIdeology += ideologyValue;\r\n      }\r\n      for (let ideology in this._state.ideologues){\r\n          this._state.ideologues[ideology] /= summIdeology;\r\n          this._state.ideologues[ideology] *= 100;\r\n      }\r\n    },\r\n    update(){\r\n        this._state.ideologuesDrift = {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        };\r\n        for (let commander of this._state.commanders){\r\n            commander.influence(this);\r\n        }\r\n        for (let ideology in this._state.ideologuesDrift){\r\n            this._state.ideologues[ideology] += this._state.ideologuesDrift[ideology];\r\n        }\r\n        this.updateRulingParty();\r\n        this.updateCurrentFlag();\r\n        this.normalizeIdeologues();\r\n    },\r\n    updateRulingParty(){\r\n        for (let ideology in this._state.ideologues){\r\n            let ideologyPopularity = this._state.ideologues[ideology];\r\n            if (ideologyPopularity > 50){\r\n                this._state.rulingParty = ideology;\r\n            }\r\n        }\r\n    },\r\n    setDrift(ideology, driftValue, user){\r\n        user.clearOptions();\r\n        this._state.ideologuesDrift[ideology] += driftValue;\r\n        user.addOptions(`Поддержка идеологии ${ideology} +${driftValue}`);\r\n\r\n    },\r\n    setUpdate(callback){\r\n        rerender = callback;\r\n    },\r\n    generateIdeologuesData(){\r\n        let data = [];\r\n\r\n        for (let ideology in this._state.ideologues){\r\n\r\n            let population = this._state.ideologues[ideology];\r\n            let dataObject = [ideology, population];\r\n            data.push(dataObject)\r\n        }\r\n        return data;\r\n    },\r\n    get commanders(){\r\n        return this._state.commanders;\r\n    },\r\n    get flag(){\r\n        return `images/flags/${this._state.currentFlag}`;\r\n    }\r\n}\r\nstore.update();\r\nwindow.store = store;\r\nexport default store;"]},"metadata":{},"sourceType":"module"}