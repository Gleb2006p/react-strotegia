{"ast":null,"code":"import commander from \"./commanderInterface\";\nimport ideas from \"./ideasInterface\";\nimport IDEA_TAG from \"./idea-tag\";\nlet SikvoaState = {\n  rulingParty: IDEA_TAG.MON,\n  color: 'royalblue',\n  flags: {\n    imperialism: 'imperialist_sikvoa.png',\n    democracy: 'democracy_sikvoa.png',\n    communism: 'communist_sikvoa.png',\n    monarchy: 'sikvoa.png'\n  },\n  currentFlag: 'sikvoa.png',\n  ideologues: {\n    communism: 0,\n    monarchy: 66,\n    imperialism: 33,\n    democracy: 0\n  },\n  factoriesValue: 100,\n  ideologuesColors: ['red', 'royalblue', 'purple', 'blue'],\n  ideologuesDrift: {\n    communism: 0,\n    monarchy: 0,\n    imperialism: 0,\n    democracy: 0\n  },\n  commanders: [{\n    __proto__: commander,\n    name: 'Глеб',\n    image: 'images/commanders/gleb.png',\n\n    influence(store) {\n      store.setDrift(IDEA_TAG.IMP, 1, this);\n    }\n\n  }, {\n    __proto__: commander,\n    name: 'Дима',\n    image: 'images/commanders/dima.png',\n\n    influence(store) {\n      store.setDrift(IDEA_TAG.MON, 0.5, this);\n    }\n\n  }],\n  ideas: [{\n    __proto__: ideas,\n    name: 'Анти Коммунизм',\n    image: 'images/ideas/anti-communism.png',\n\n    influences(store) {\n      store.setDrift(IDEA_TAG.COM, -0.1, this);\n    },\n\n    conditionAwaible(store) {\n      return store.rulingParty !== IDEA_TAG.COM;\n    }\n\n  }, {\n    __proto__: ideas,\n    name: 'Легион Понасенкова',\n    image: 'images/ideas/legion_of_ponasenkov.png',\n\n    influences(store) {\n      store.setDrift(IDEA_TAG.DEM, 1.5, this);\n    },\n\n    conditionAwaible(store) {\n      return store.rulingParty !== IDEA_TAG.COM;\n    }\n\n  }]\n};\nexport default SikvoaState;","map":{"version":3,"sources":["C:/Users/Glib/Desktop/projects/minecraft-countries/src/store/sikvoa-state.js"],"names":["commander","ideas","IDEA_TAG","SikvoaState","rulingParty","MON","color","flags","imperialism","democracy","communism","monarchy","currentFlag","ideologues","factoriesValue","ideologuesColors","ideologuesDrift","commanders","__proto__","name","image","influence","store","setDrift","IMP","influences","COM","conditionAwaible","DEM"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAIC,WAAW,GAAG;AACVC,EAAAA,WAAW,EAAGF,QAAQ,CAACG,GADb;AAEVC,EAAAA,KAAK,EAAG,WAFE;AAGVC,EAAAA,KAAK,EAAG;AACJC,IAAAA,WAAW,EAAG,wBADV;AAEJC,IAAAA,SAAS,EAAG,sBAFR;AAGJC,IAAAA,SAAS,EAAG,sBAHR;AAIJC,IAAAA,QAAQ,EAAI;AAJR,GAHE;AASVC,EAAAA,WAAW,EAAG,YATJ;AAUVC,EAAAA,UAAU,EAAG;AACTH,IAAAA,SAAS,EAAG,CADH;AAETC,IAAAA,QAAQ,EAAG,EAFF;AAGTH,IAAAA,WAAW,EAAG,EAHL;AAITC,IAAAA,SAAS,EAAG;AAJH,GAVH;AAgBVK,EAAAA,cAAc,EAAG,GAhBP;AAiBVC,EAAAA,gBAAgB,EAAG,CACf,KADe,EAEf,WAFe,EAGf,QAHe,EAIf,MAJe,CAjBT;AAuBVC,EAAAA,eAAe,EAAG;AACdN,IAAAA,SAAS,EAAG,CADE;AAEdC,IAAAA,QAAQ,EAAG,CAFG;AAGdH,IAAAA,WAAW,EAAG,CAHA;AAIdC,IAAAA,SAAS,EAAG;AAJE,GAvBR;AA6BVQ,EAAAA,UAAU,EAAG,CACT;AACIC,IAAAA,SAAS,EAAGlB,SADhB;AAEImB,IAAAA,IAAI,EAAG,MAFX;AAGIC,IAAAA,KAAK,EAAG,4BAHZ;;AAKIC,IAAAA,SAAS,CAACC,KAAD,EAAO;AACZA,MAAAA,KAAK,CAACC,QAAN,CAAerB,QAAQ,CAACsB,GAAxB,EAA6B,CAA7B,EAAgC,IAAhC;AACH;;AAPL,GADS,EAUT;AACIN,IAAAA,SAAS,EAAElB,SADf;AAEImB,IAAAA,IAAI,EAAG,MAFX;AAGIC,IAAAA,KAAK,EAAG,4BAHZ;;AAKIC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACC,QAAN,CAAerB,QAAQ,CAACG,GAAxB,EAA6B,GAA7B,EAAkC,IAAlC;AACH;;AAPL,GAVS,CA7BH;AAqDVJ,EAAAA,KAAK,EAAG,CACJ;AACIiB,IAAAA,SAAS,EAAGjB,KADhB;AAEIkB,IAAAA,IAAI,EAAG,gBAFX;AAGIC,IAAAA,KAAK,EAAG,iCAHZ;;AAIIK,IAAAA,UAAU,CAACH,KAAD,EAAO;AACbA,MAAAA,KAAK,CAACC,QAAN,CAAerB,QAAQ,CAACwB,GAAxB,EAA6B,CAAC,GAA9B,EAAmC,IAAnC;AACH,KANL;;AAOIC,IAAAA,gBAAgB,CAACL,KAAD,EAAO;AACnB,aAAOA,KAAK,CAAClB,WAAN,KAAsBF,QAAQ,CAACwB,GAAtC;AACH;;AATL,GADI,EAYJ;AACIR,IAAAA,SAAS,EAAGjB,KADhB;AAEIkB,IAAAA,IAAI,EAAG,oBAFX;AAGIC,IAAAA,KAAK,EAAG,uCAHZ;;AAIIK,IAAAA,UAAU,CAACH,KAAD,EAAO;AACbA,MAAAA,KAAK,CAACC,QAAN,CAAerB,QAAQ,CAAC0B,GAAxB,EAA+B,GAA/B,EAAoC,IAApC;AACH,KANL;;AAOID,IAAAA,gBAAgB,CAACL,KAAD,EAAO;AACnB,aAAOA,KAAK,CAAClB,WAAN,KAAsBF,QAAQ,CAACwB,GAAtC;AACH;;AATL,GAZI;AArDE,CAAlB;AAiFA,eAAgBvB,WAAhB","sourcesContent":["import commander from \"./commanderInterface\";\r\nimport ideas from \"./ideasInterface\";\r\nimport IDEA_TAG from \"./idea-tag\";\r\n\r\nlet SikvoaState = {\r\n        rulingParty : IDEA_TAG.MON,\r\n        color : 'royalblue',\r\n        flags : {\r\n            imperialism : 'imperialist_sikvoa.png',\r\n            democracy : 'democracy_sikvoa.png',\r\n            communism : 'communist_sikvoa.png',\r\n            monarchy  : 'sikvoa.png',\r\n        },\r\n        currentFlag : 'sikvoa.png',\r\n        ideologues : {\r\n            communism : 0,\r\n            monarchy : 66,\r\n            imperialism : 33,\r\n            democracy : 0,\r\n        },\r\n        factoriesValue : 100,\r\n        ideologuesColors : [\r\n            'red',\r\n            'royalblue',\r\n            'purple',\r\n            'blue',\r\n        ],\r\n        ideologuesDrift : {\r\n            communism : 0,\r\n            monarchy : 0,\r\n            imperialism : 0,\r\n            democracy : 0,\r\n        },\r\n        commanders : [\r\n            {\r\n                __proto__ : commander,\r\n                name : 'Глеб',\r\n                image : 'images/commanders/gleb.png',\r\n\r\n                influence(store){\r\n                    store.setDrift(IDEA_TAG.IMP, 1, this)\r\n                },\r\n            },\r\n            {\r\n                __proto__: commander,\r\n                name : 'Дима',\r\n                image : 'images/commanders/dima.png',\r\n\r\n                influence(store) {\r\n                    store.setDrift(IDEA_TAG.MON, 0.5, this);\r\n                },\r\n\r\n\r\n            }\r\n        ],\r\n\r\n\r\n        ideas : [\r\n            {\r\n                __proto__ : ideas,\r\n                name : 'Анти Коммунизм',\r\n                image : 'images/ideas/anti-communism.png',\r\n                influences(store){\r\n                    store.setDrift(IDEA_TAG.COM, -0.1, this);\r\n                },\r\n                conditionAwaible(store){\r\n                    return store.rulingParty !== IDEA_TAG.COM;\r\n                }\r\n            },\r\n            {\r\n                __proto__ : ideas,\r\n                name : 'Легион Понасенкова',\r\n                image : 'images/ideas/legion_of_ponasenkov.png',\r\n                influences(store){\r\n                    store.setDrift(IDEA_TAG.DEM,   1.5, this);\r\n                },\r\n                conditionAwaible(store){\r\n                    return store.rulingParty !== IDEA_TAG.COM;\r\n                }\r\n            }\r\n\r\n\r\n        ],\r\n\r\n};\r\nexport  default SikvoaState;"]},"metadata":{},"sourceType":"module"}